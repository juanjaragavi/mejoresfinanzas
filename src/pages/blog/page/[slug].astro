---
import Pagination from "@/layouts/components/Pagination.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { markdownify } from "@/lib/utils/textConverter";
import Post from "@/layouts/partials/Post.astro";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

export async function getStaticPaths() {
  // Get posts from both collections for blog aggregation
  const personalFinancePosts = await getSinglePage("personal-finance");
  const financialSolutionsPosts = await getSinglePage("financial-solutions");
  const allPosts = [...personalFinancePosts, ...financialSolutionsPosts];
  const totalPages = Math.ceil(allPosts.length / config.settings.pagination);
  const paths = [];

  for (let i = 1; i < totalPages; i++) {
    paths.push({
      params: {
        slug: (i + 1).toString(),
      },
    });
  }
  return paths;
}

const { slug } = Astro.params;
const postIndex = (await getEntry("blog", "-index")) as CollectionEntry<"blog">;

// Get aggregated content for blog
const personalFinancePosts = await getSinglePage("personal-finance");
const financialSolutionsPosts = await getSinglePage("financial-solutions");
const allPosts = [...personalFinancePosts, ...financialSolutionsPosts];
const sortedPosts = sortByDate(allPosts);
const totalPages = Math.ceil(allPosts.length / config.settings.pagination);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);

// Set canonical URL for this pagination page
const canonicalUrl = `${config.site.base_url}/blog/page/${currentPage}`;
---

<Base
  title={postIndex?.data.title}
  canonical={canonicalUrl}
  description={`${postIndex?.data.description || "Latest articles and financial insights"} - Page ${currentPage}`}
>
  <section class="section">
    <div class="container">
      <h1
        class="mb-10 font-normal lg:text-[56px]"
        set:html={markdownify(postIndex?.data.title || "Blog")}
      />
      <div class="row">
        {
          currentPosts.map((post) => (
            <div class="col-12 mb-8 sm:col-6">
              <Post post={post} />
            </div>
          ))
        }
      </div>
      <Pagination
        section={"blog"}
        totalPages={totalPages}
        currentPage={currentPage}
      />
    </div>
  </section>
</Base>
